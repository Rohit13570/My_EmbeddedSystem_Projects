
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080c  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d4  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000335  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e9  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  7a:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad>:
}
char keypad()
{
	int key;
	while(1){
		PORTB=0x0E;
  82:	8e e0       	ldi	r24, 0x0E	; 14
  84:	88 bb       	out	0x18, r24	; 24
		key=PINB&(0xF0);
  86:	86 b3       	in	r24, 0x16	; 22
		switch(key)
  88:	80 7f       	andi	r24, 0xF0	; 240
  8a:	80 3b       	cpi	r24, 0xB0	; 176
  8c:	59 f0       	breq	.+22     	; 0xa4 <keypad+0x22>
  8e:	18 f4       	brcc	.+6      	; 0x96 <keypad+0x14>
  90:	80 37       	cpi	r24, 0x70	; 112
  92:	51 f0       	breq	.+20     	; 0xa8 <keypad+0x26>
  94:	0b c0       	rjmp	.+22     	; 0xac <keypad+0x2a>
  96:	80 3d       	cpi	r24, 0xD0	; 208
  98:	09 f4       	brne	.+2      	; 0x9c <keypad+0x1a>
  9a:	50 c0       	rjmp	.+160    	; 0x13c <keypad+0xba>
  9c:	80 3e       	cpi	r24, 0xE0	; 224
  9e:	09 f4       	brne	.+2      	; 0xa2 <keypad+0x20>
  a0:	4b c0       	rjmp	.+150    	; 0x138 <keypad+0xb6>
  a2:	04 c0       	rjmp	.+8      	; 0xac <keypad+0x2a>
		{
			case 0xE0 : return('1');
			case 0xD0 : return('2');
			case 0xB0 : return('3');
  a4:	83 e3       	ldi	r24, 0x33	; 51
  a6:	08 95       	ret
			case 0x70 : return('4');
  a8:	84 e3       	ldi	r24, 0x34	; 52
  aa:	08 95       	ret
		}
		PORTB=0x0D;
  ac:	8d e0       	ldi	r24, 0x0D	; 13
  ae:	88 bb       	out	0x18, r24	; 24
		key=PINB&(0xF0);
  b0:	86 b3       	in	r24, 0x16	; 22
		switch(key)
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	80 3b       	cpi	r24, 0xB0	; 176
  b6:	51 f0       	breq	.+20     	; 0xcc <keypad+0x4a>
  b8:	18 f4       	brcc	.+6      	; 0xc0 <keypad+0x3e>
  ba:	80 37       	cpi	r24, 0x70	; 112
  bc:	49 f0       	breq	.+18     	; 0xd0 <keypad+0x4e>
  be:	0a c0       	rjmp	.+20     	; 0xd4 <keypad+0x52>
  c0:	80 3d       	cpi	r24, 0xD0	; 208
  c2:	f1 f1       	breq	.+124    	; 0x140 <keypad+0xbe>
  c4:	80 3e       	cpi	r24, 0xE0	; 224
  c6:	31 f4       	brne	.+12     	; 0xd4 <keypad+0x52>
		{
			case 0xE0 : return('5');
  c8:	85 e3       	ldi	r24, 0x35	; 53
  ca:	08 95       	ret
			case 0xD0 : return('6');
			case 0xB0 : return('7');
  cc:	87 e3       	ldi	r24, 0x37	; 55
  ce:	08 95       	ret
			case 0x70 : return('8');
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	08 95       	ret
		}
		PORTB=0x0B;
  d4:	8b e0       	ldi	r24, 0x0B	; 11
  d6:	88 bb       	out	0x18, r24	; 24
		key=PINB&(0xF0);
  d8:	86 b3       	in	r24, 0x16	; 22
		switch(key)
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	80 3b       	cpi	r24, 0xB0	; 176
  de:	51 f0       	breq	.+20     	; 0xf4 <keypad+0x72>
  e0:	18 f4       	brcc	.+6      	; 0xe8 <keypad+0x66>
  e2:	80 37       	cpi	r24, 0x70	; 112
  e4:	49 f0       	breq	.+18     	; 0xf8 <keypad+0x76>
  e6:	0a c0       	rjmp	.+20     	; 0xfc <keypad+0x7a>
  e8:	80 3d       	cpi	r24, 0xD0	; 208
  ea:	61 f1       	breq	.+88     	; 0x144 <keypad+0xc2>
  ec:	80 3e       	cpi	r24, 0xE0	; 224
  ee:	31 f4       	brne	.+12     	; 0xfc <keypad+0x7a>
		{
			case 0xE0 : return('9');
  f0:	89 e3       	ldi	r24, 0x39	; 57
  f2:	08 95       	ret
			case 0xD0 : return('A');
			case 0xB0 : return('B');
  f4:	82 e4       	ldi	r24, 0x42	; 66
  f6:	08 95       	ret
			case 0x70 : return('C');
  f8:	83 e4       	ldi	r24, 0x43	; 67
  fa:	08 95       	ret
		}
		PORTB=0x07;
  fc:	87 e0       	ldi	r24, 0x07	; 7
  fe:	88 bb       	out	0x18, r24	; 24
		key=PINB&(0xF0);
 100:	86 b3       	in	r24, 0x16	; 22
		switch(key)
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	80 3b       	cpi	r24, 0xB0	; 176
 106:	51 f0       	breq	.+20     	; 0x11c <keypad+0x9a>
 108:	18 f4       	brcc	.+6      	; 0x110 <keypad+0x8e>
 10a:	80 37       	cpi	r24, 0x70	; 112
 10c:	49 f0       	breq	.+18     	; 0x120 <keypad+0x9e>
 10e:	0a c0       	rjmp	.+20     	; 0x124 <keypad+0xa2>
 110:	80 3d       	cpi	r24, 0xD0	; 208
 112:	d1 f0       	breq	.+52     	; 0x148 <keypad+0xc6>
 114:	80 3e       	cpi	r24, 0xE0	; 224
 116:	31 f4       	brne	.+12     	; 0x124 <keypad+0xa2>
		{
			case 0xE0 : return('D');
 118:	84 e4       	ldi	r24, 0x44	; 68
 11a:	08 95       	ret
			case 0xD0 : return('E');
			case 0xB0 : return('F');
 11c:	86 e4       	ldi	r24, 0x46	; 70
 11e:	08 95       	ret
			case 0x70 : return('G');
 120:	87 e4       	ldi	r24, 0x47	; 71
 122:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	84 e3       	ldi	r24, 0x34	; 52
 128:	9c e0       	ldi	r25, 0x0C	; 12
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <keypad+0xa8>
 132:	00 c0       	rjmp	.+0      	; 0x134 <keypad+0xb2>
 134:	00 00       	nop
 136:	a5 cf       	rjmp	.-182    	; 0x82 <keypad>
	while(1){
		PORTB=0x0E;
		key=PINB&(0xF0);
		switch(key)
		{
			case 0xE0 : return('1');
 138:	81 e3       	ldi	r24, 0x31	; 49
 13a:	08 95       	ret
			case 0xD0 : return('2');
 13c:	82 e3       	ldi	r24, 0x32	; 50
 13e:	08 95       	ret
		PORTB=0x0D;
		key=PINB&(0xF0);
		switch(key)
		{
			case 0xE0 : return('5');
			case 0xD0 : return('6');
 140:	86 e3       	ldi	r24, 0x36	; 54
 142:	08 95       	ret
		PORTB=0x0B;
		key=PINB&(0xF0);
		switch(key)
		{
			case 0xE0 : return('9');
			case 0xD0 : return('A');
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	08 95       	ret
		PORTB=0x07;
		key=PINB&(0xF0);
		switch(key)
		{
			case 0xE0 : return('D');
			case 0xD0 : return('E');
 148:	85 e4       	ldi	r24, 0x45	; 69
			case 0xB0 : return('F');
			case 0x70 : return('G');
		}_delay_ms(250);
	}
}
 14a:	08 95       	ret

0000014c <cmd>:

void cmd(int cmd){
	PORTD=cmd;
 14c:	82 bb       	out	0x12, r24	; 18
	PORTC=0x02;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	85 bb       	out	0x15, r24	; 21
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	84 e3       	ldi	r24, 0x34	; 52
 156:	9c e0       	ldi	r25, 0x0C	; 12
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <cmd+0xc>
 160:	00 c0       	rjmp	.+0      	; 0x162 <cmd+0x16>
 162:	00 00       	nop
	_delay_ms(250);
	PORTC=0x00;
 164:	15 ba       	out	0x15, r1	; 21
 166:	08 95       	ret

00000168 <lcdInit>:
	
	return(0);
}
void lcdInit()
{   
	cmd(0x38);
 168:	88 e3       	ldi	r24, 0x38	; 56
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 a6 00 	call	0x14c	; 0x14c <cmd>
	cmd(0x01);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 a6 00 	call	0x14c	; 0x14c <cmd>
	//cmd(0xC7);
	cmd(0x06);
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 a6 00 	call	0x14c	; 0x14c <cmd>
	cmd(0x0E);
 180:	8e e0       	ldi	r24, 0x0E	; 14
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 a6 00 	call	0x14c	; 0x14c <cmd>
	cmd(0x80);
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 a6 00 	call	0x14c	; 0x14c <cmd>
 190:	08 95       	ret

00000192 <data>:
	_delay_ms(250);
	PORTC=0x00;
}

void data(char ch){
	PORTD=ch;
 192:	82 bb       	out	0x12, r24	; 18
	PORTC=0x03;
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	85 bb       	out	0x15, r24	; 21
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	84 e3       	ldi	r24, 0x34	; 52
 19c:	9c e0       	ldi	r25, 0x0C	; 12
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <data+0xc>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <data+0x16>
 1a8:	00 00       	nop
	_delay_ms(250);
	PORTC=0x01;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	08 95       	ret

000001b0 <lcdDisplay>:
}
void lcdDisplay(const char *str){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
	while(*str!='\0'){
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <lcdDisplay+0xe>
		data(*str);
 1b8:	0e 94 c9 00 	call	0x192	; 0x192 <data>
		str++;
 1bc:	21 96       	adiw	r28, 0x01	; 1
	PORTC=0x03;
	_delay_ms(250);
	PORTC=0x01;
}
void lcdDisplay(const char *str){
	while(*str!='\0'){
 1be:	88 81       	ld	r24, Y
 1c0:	81 11       	cpse	r24, r1
 1c2:	fa cf       	rjmp	.-12     	; 0x1b8 <lcdDisplay+0x8>
		data(*str);
		str++;
	}}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <main>:
void lcdDisplay(const char *);
char keypad();
void lcdInit();
int main(void)
{   char ch;
	DDRB=0x0f;
 1ca:	8f e0       	ldi	r24, 0x0F	; 15
 1cc:	87 bb       	out	0x17, r24	; 23
	DDRD=0xff;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	81 bb       	out	0x11, r24	; 17
	DDRC=0xff;
 1d2:	84 bb       	out	0x14, r24	; 20
	lcdInit();
 1d4:	0e 94 b4 00 	call	0x168	; 0x168 <lcdInit>
	lcdDisplay("Password");
 1d8:	80 e6       	ldi	r24, 0x60	; 96
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcdDisplay>
	cmd(0xC1);
 1e0:	81 ec       	ldi	r24, 0xC1	; 193
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 a6 00 	call	0x14c	; 0x14c <cmd>
	
	while(1)
	
	{
		ch = keypad();
 1e8:	0e 94 41 00 	call	0x82	; 0x82 <keypad>
		data(ch);
 1ec:	0e 94 c9 00 	call	0x192	; 0x192 <data>
 1f0:	fb cf       	rjmp	.-10     	; 0x1e8 <main+0x1e>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
