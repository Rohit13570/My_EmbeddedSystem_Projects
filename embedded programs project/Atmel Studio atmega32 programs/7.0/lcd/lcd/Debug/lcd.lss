
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000124  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000781  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f0  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dd  00000000  00000000  00000fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032c  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000133  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  7a:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
    while (1) 
    {
    }
}
void lcd_cmd(int cmd){
	PORTD=cmd;
  82:	82 bb       	out	0x12, r24	; 18
	PORTC=0x02;
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	84 e3       	ldi	r24, 0x34	; 52
  8c:	9c e0       	ldi	r25, 0x0C	; 12
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <lcd_cmd+0xc>
  96:	00 c0       	rjmp	.+0      	; 0x98 <lcd_cmd+0x16>
  98:	00 00       	nop
	_delay_ms(250);
	PORTC=0x00;
  9a:	15 ba       	out	0x15, r1	; 21
  9c:	08 95       	ret

0000009e <lcd_data>:
}

void lcd_data(int data){
	PORTD=data;
  9e:	82 bb       	out	0x12, r24	; 18
	PORTC=0x03;
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	85 bb       	out	0x15, r24	; 21
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	84 e3       	ldi	r24, 0x34	; 52
  a8:	9c e0       	ldi	r25, 0x0C	; 12
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <lcd_data+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_data+0x16>
  b4:	00 00       	nop
	_delay_ms(250);
	PORTC=0x01;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	08 95       	ret

000000bc <lcdDisplay>:
}
void lcdDisplay(const char *str){
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ec 01       	movw	r28, r24
	while(*str!='\0'){
  c2:	04 c0       	rjmp	.+8      	; 0xcc <lcdDisplay+0x10>
		lcd_data(*str);
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
		str++;
  ca:	21 96       	adiw	r28, 0x01	; 1
	PORTC=0x03;
	_delay_ms(250);
	PORTC=0x01;
}
void lcdDisplay(const char *str){
	while(*str!='\0'){
  cc:	88 81       	ld	r24, Y
  ce:	81 11       	cpse	r24, r1
  d0:	f9 cf       	rjmp	.-14     	; 0xc4 <lcdDisplay+0x8>
		lcd_data(*str);
		str++;
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <main>:
#include <util/delay.h>
void lcdDisplay(const char*);
void lcd_cmd(int);
void lcd_data(int);
int main(void)
{  DDRD=0xff;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	81 bb       	out	0x11, r24	; 17
	DDRC=0xff;
  dc:	84 bb       	out	0x14, r24	; 20
	lcd_cmd(0x38);
  de:	88 e3       	ldi	r24, 0x38	; 56
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x01);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0xC0);
  ee:	80 ec       	ldi	r24, 0xC0	; 192
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x06);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0E);
  fe:	8e e0       	ldi	r24, 0x0E	; 14
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_data('a');
 106:	81 e6       	ldi	r24, 0x61	; 97
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_cmd(0xc7);
 10e:	87 ec       	ldi	r24, 0xC7	; 199
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcdDisplay("hello");
 116:	80 e6       	ldi	r24, 0x60	; 96
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 5e 00 	call	0xbc	; 0xbc <lcdDisplay>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x46>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
