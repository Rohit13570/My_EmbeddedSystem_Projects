
uartprogramstarhash.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000184  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cd  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000653  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 65 00 	call	0xca	; 0xca <main>
  7a:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uart_Init>:
			}
			
		}}  return 0;
	}
void uart_Init(){
	UCSRA =0x00;
  82:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
  84:	88 e1       	ldi	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x06;
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
  8c:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x67;
  8e:	87 e6       	ldi	r24, 0x67	; 103
  90:	89 b9       	out	0x09, r24	; 9
  92:	08 95       	ret

00000094 <rx_char>:
}
char rx_char(){
	while((UCSRA&0x80)==0);
  94:	5f 9b       	sbis	0x0b, 7	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <rx_char>
	return(UDR);
  98:	8c b1       	in	r24, 0x0c	; 12
}
  9a:	08 95       	ret

0000009c <tx_char>:
void tx_char(char ch){
	UDR = ch ;
  9c:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&0x40)==0);
  9e:	5e 9b       	sbis	0x0b, 6	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <tx_char+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	9c e9       	ldi	r25, 0x9C	; 156
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <tx_char+0xa>
  aa:	00 c0       	rjmp	.+0      	; 0xac <tx_char+0x10>
  ac:	00 00       	nop
  ae:	08 95       	ret

000000b0 <tx_str>:
	_delay_ms(10);
}
void tx_str(const char *str){
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
	while(*str!='\0'){
  b6:	03 c0       	rjmp	.+6      	; 0xbe <tx_str+0xe>
		tx_char(*str);
  b8:	0e 94 4e 00 	call	0x9c	; 0x9c <tx_char>
		str++;
  bc:	21 96       	adiw	r28, 0x01	; 1
	UDR = ch ;
	while((UCSRA&0x40)==0);
	_delay_ms(10);
}
void tx_str(const char *str){
	while(*str!='\0'){
  be:	88 81       	ld	r24, Y
  c0:	81 11       	cpse	r24, r1
  c2:	fa cf       	rjmp	.-12     	; 0xb8 <tx_str+0x8>
		tx_char(*str);
		str++;
	}
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <main>:
#include <util/delay.h>
void tx_char(char);
char rx_char();
void tx_str(const char *);
void uart_Init();
int main(void){
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	62 97       	sbiw	r28, 0x12	; 18
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
	char letter,userpass[10],password[]="pass123";
  de:	88 e0       	ldi	r24, 0x08	; 8
  e0:	ea e9       	ldi	r30, 0x9A	; 154
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	de 01       	movw	r26, r28
  e6:	1b 96       	adiw	r26, 0x0b	; 11
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x1e>
	int index=0;
   uart_Init();
  f0:	0e 94 41 00 	call	0x82	; 0x82 <uart_Init>
	tx_char('A');
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	0e 94 4e 00 	call	0x9c	; 0x9c <tx_char>
	tx_str("Hello 2020");
  fa:	80 e6       	ldi	r24, 0x60	; 96
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 58 00 	call	0xb0	; 0xb0 <tx_str>
	tx_char('\r');
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	0e 94 4e 00 	call	0x9c	; 0x9c <tx_char>
	while(1){
		letter = rx_char();
 108:	0e 94 4a 00 	call	0x94	; 0x94 <rx_char>
		if(letter=='*')
 10c:	8a 32       	cpi	r24, 0x2A	; 42
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x3e>
 110:	00 e0       	ldi	r16, 0x00	; 0
 112:	10 e0       	ldi	r17, 0x00	; 0
		{
			
			index=0;
			do{
				userpass[index] = rx_char();
 114:	0e 94 4a 00 	call	0x94	; 0x94 <rx_char>
 118:	e1 e0       	ldi	r30, 0x01	; 1
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	ec 0f       	add	r30, r28
 11e:	fd 1f       	adc	r31, r29
 120:	e0 0f       	add	r30, r16
 122:	f1 1f       	adc	r31, r17
 124:	80 83       	st	Z, r24
				if(userpass[index]=='#')
 126:	83 32       	cpi	r24, 0x23	; 35
 128:	21 f0       	breq	.+8      	; 0x132 <main+0x68>
				break;
				index++;
 12a:	0f 5f       	subi	r16, 0xFF	; 255
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
			}while(userpass[index-1]!='#');
 12e:	83 32       	cpi	r24, 0x23	; 35
 130:	89 f7       	brne	.-30     	; 0x114 <main+0x4a>
			userpass[index]='\0';
 132:	e1 e0       	ldi	r30, 0x01	; 1
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ec 0f       	add	r30, r28
 138:	fd 1f       	adc	r31, r29
 13a:	e0 0f       	add	r30, r16
 13c:	f1 1f       	adc	r31, r17
 13e:	10 82       	st	Z, r1
			if(strcmp(userpass,password)==0)
 140:	be 01       	movw	r22, r28
 142:	65 5f       	subi	r22, 0xF5	; 245
 144:	7f 4f       	sbci	r23, 0xFF	; 255
 146:	ce 01       	movw	r24, r28
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	0e 94 b7 00 	call	0x16e	; 0x16e <strcmp>
 14e:	89 2b       	or	r24, r25
 150:	49 f4       	brne	.+18     	; 0x164 <main+0x9a>
			{
				tx_str("USER ACCESS GRANTED!!!\r");
 152:	8b e6       	ldi	r24, 0x6B	; 107
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 58 00 	call	0xb0	; 0xb0 <tx_str>
				tx_str(userpass);
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	0e 94 58 00 	call	0xb0	; 0xb0 <tx_str>
 162:	d2 cf       	rjmp	.-92     	; 0x108 <main+0x3e>
			}
			else{
				tx_str("\rUSER ACCESS DENIED!!!") ;
 164:	83 e8       	ldi	r24, 0x83	; 131
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 58 00 	call	0xb0	; 0xb0 <tx_str>
 16c:	cd cf       	rjmp	.-102    	; 0x108 <main+0x3e>

0000016e <strcmp>:
 16e:	fb 01       	movw	r30, r22
 170:	dc 01       	movw	r26, r24
 172:	8d 91       	ld	r24, X+
 174:	01 90       	ld	r0, Z+
 176:	80 19       	sub	r24, r0
 178:	01 10       	cpse	r0, r1
 17a:	d9 f3       	breq	.-10     	; 0x172 <strcmp+0x4>
 17c:	99 0b       	sbc	r25, r25
 17e:	08 95       	ret

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
